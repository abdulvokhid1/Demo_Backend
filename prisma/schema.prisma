// This is your Prisma schema file,
// learn more about it in the docs https//pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

enum YESNO {
  YES
  NO
}

enum PAYMENT_METHOD {
  CASH
  TRANSFER
  CARD
  PHONE
}

enum STATUS {
  WAITING
  REJECTED
  CONFIRMED
}

// modify Database Scheme
model User {
  id             Int     @id @default(autoincrement())
  member_id      String? @unique
  email          String  @unique
  hashedPassword String
  name           String? // can be null(optional)

  mobilephone_number String  @default("01000000000")
  phone_number       String?
  zip1               String?
  zip2               String?
  address            String?
  address1           String?
  addressdoro        String?
  zonecode           String?
  recomid            Int?
  recom              User?   @relation("Recommendation", fields: [recomid], references: [id])
  subs               User[]  @relation("Recommendation")
  sponid             Int?
  return_bank        String?
  return_account     String?
  return_name        String?

  createdAt DateTime     @default(now())
  updatedAt DateTime     @updatedAt
  // relationship
  notes     Note[]
  deposits  Deposit[]
  role      String
  centerId  Int          @default(0)
  center    Center       @relation(fields: [centerId], references: [id])
  levelId   Int          @default(0)
  Level     CompanyLevel @relation(fields: [levelId], references: [id])

  @@map("users") // users id "table's name" in Postgres SQL
}

// One user can "write" Many notes
model Note {
  id          Int      @id @default(autoincrement())
  title       String
  description String
  url         String
  // other fields ...
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  // relationship
  userId      Int // like "foreign key"
  user        User     @relation(fields: [userId], references: [id])

  @@map("notes")
}

model Center {
  id          Int      @id @default(autoincrement())
  name        String
  description String?
  url         String?
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  User        User[]

  @@map("centers")
}

model CompanyLevel {
  id           Int      @id @default(autoincrement())
  title        String
  rank         Int      @unique
  minBuy       Float    @default(0)
  minSell      Float    @default(0)
  minSub       Int      @default(0)
  discountRate Float    @default(0)
  rewardRate   Float    @default(0)
  bgColor      String   @default("#FFFFFF")
  txtColor     String   @default("#000000")
  description  String?
  createdAt    DateTime @default(now())
  updatedAt    DateTime @default(now()) @updatedAt
  User         User[]

  @@map("company_levels")
}

model Saleslevel {
  id               Int    @id @default(autoincrement())
  level            Int
  position_name    String
  purchase_amount  Int
  amount_limit     Int
  purchase_pv      Int
  discount_rate    Float
  guanli_fee       Int
  minimum_purchase Int
  upgrade          Int
  payment_limit    Float
  memo             String

  @@map("saleslevel")
}

// model Center {
//   id               Int      @id @default(autoincrement())
//   linkedId         String
//   center_name      String
//   center_owner     String
//   @@map("center_register")
// }

model setupfee {
  id             Int   @id @default(autoincrement())
  select_fee     Float
  tax            Int
  withdrawal_fee Int
  transfer_fee   Int
  other_savefee  Int

  @@map("setup_fee")
}

model saleregister {
  id             Int    @id @default(autoincrement())
  sale_date      Int
  sale_type      Float
  meno           String
  select_amount  Float
  sale_amount    Int
  sale_pv        Int
  appstatus      Float
  daily_pay      YESNO
  sale_id        Float
  select_ex_date Float

  @@map("sale_register")
}

model Product {
  id         Int               @id @default(autoincrement())
  name       String
  categories CategoryProduct[]

  @@map("product")
}

model Category {
  id        Int               @id @default(autoincrement())
  name      String
  isActive  YESNO
  img       String
  parentId  Int?
  parent    Category?         @relation("SubCategory", fields: [parentId], references: [id])
  subs      Category[]        @relation("SubCategory")
  products  CategoryProduct[]
  createdAt DateTime          @default(now())
  updatedAt DateTime          @default(now()) @updatedAt

  @@map("category")
}

model CategoryProduct {
  product    Product  @relation(fields: [productId], references: [id])
  productId  Int // relation scalar field (used in the `@relation` attribute above)
  category   Category @relation(fields: [categoryId], references: [id])
  categoryId Int // relation scalar field (used in the `@relation` attribute above)
  createdAt  DateTime @default(now())
  updatedAt  DateTime @default(now()) @updatedAt

  @@id([productId, categoryId])
  @@map("categoryproduct")
}

model Deposit {
  id          Int      @id @default(autoincrement())
  depositDate DateTime @default(now())
  userId      Int // like "foreign key"
  user        User     @relation(fields: [userId], references: [id])
  amount      Float
  status      Int      @default(0)
  fee         Int      @default(0)
  isRewarded  Int      @default(0)
  method      Int      @default(0)
  memo        String   @default("")
  createdAt   DateTime @default(now())
  updatedAt   DateTime @default(now()) @updatedAt

  @@map("deposit")
}
