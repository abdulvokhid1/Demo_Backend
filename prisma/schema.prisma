// This is your Prisma schema file,
// learn more about it in the docs https//pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

enum YESNO {
  YES
  NO
}

enum PAYMENT_METHOD {
  CASH
  TRANSFER
  CARD
  PHONE
}

enum STATUS {
  WAITING
  REJECTED
  CONFIRMED
}

// modify Database Scheme
model User {
  id             Int     @id @default(autoincrement())
  member_id      String? @unique
  email          String  @unique
  hashedPassword String
  name           String? // can be null(optional)

  mobilephone_number String  @default("01000000000")
  phone_number       String?
  zip1               String?
  zip2               String?
  address            String?
  address1           String?
  addressdoro        String?
  zonecode           String?
  recomid            Int?
  recom              User?   @relation("Recommendation", fields: [recomid], references: [id])
  subs               User[]  @relation("Recommendation")
  sub1               Int?    @default(0)
  sub2               Int?    @default(0)
  sponid             Int?
  return_bank        String?
  return_account     String?
  return_name        String?

  createdAt   DateTime      @default(now())
  updatedAt   DateTime      @updatedAt
  // relationship
  notes       Note[]
  deposits    Deposit[]
  calculation Calculation[]
  role        String
  centerId    Int           @default(0)
  center      Center        @relation(fields: [centerId], references: [id])
  levelId     Int           @default(0)
  Level       CompanyLevel  @relation(fields: [levelId], references: [id])

  @@map("users") // users id "table's name" in Postgres SQL
}

// One user can "write" Many notes
model Note {
  id          Int      @id @default(autoincrement())
  title       String
  description String
  url         String
  // other fields ...
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  // relationship
  userId      Int // like "foreign key"
  user        User     @relation(fields: [userId], references: [id])

  @@map("notes")
}

model Center {
  id          Int      @id @default(autoincrement())
  name        String
  description String?
  url         String?
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  User        User[]

  @@map("centers")
}

model CompanyLevel {
  id           Int      @id @default(autoincrement())
  title        String
  rank         Int      @unique
  minBuy       Float    @default(0)
  minSell      Float    @default(0)
  minSub       Int      @default(0)
  discountRate Float    @default(0)
  rewardRate   Float    @default(0)
  bgColor      String   @default("#FFFFFF")
  txtColor     String   @default("#000000")
  description  String?
  createdAt    DateTime @default(now())
  updatedAt    DateTime @default(now()) @updatedAt
  User         User[]

  @@map("company_levels")
}

model Saleslevel {
  id               Int    @id @default(autoincrement())
  level            Int
  position_name    String
  purchase_amount  Int
  amount_limit     Int
  purchase_pv      Int
  discount_rate    Float
  guanli_fee       Int
  minimum_purchase Int
  upgrade          Int
  payment_limit    Float
  memo             String

  @@map("saleslevel")
}

// model Center {
//   id               Int      @id @default(autoincrement())
//   linkedId         String
//   center_name      String
//   center_owner     String
//   @@map("center_register")
// }

model setupfee {
  id             Int   @id @default(autoincrement())
  select_fee     Float
  tax            Int
  withdrawal_fee Int
  transfer_fee   Int
  other_savefee  Int

  @@map("setup_fee")
}

model saleregister {
  id             Int    @id @default(autoincrement())
  sale_date      Int
  sale_type      Float
  meno           String
  select_amount  Float
  sale_amount    Int
  sale_pv        Int
  appstatus      Float
  daily_pay      YESNO
  sale_id        Float
  select_ex_date Float

  @@map("sale_register")
}

model Product {
  id                 Int               @id @default(autoincrement())
  name               String
  isActive           Boolean
  sellType           Int               @default(1)
  startSellDate      DateTime?
  endSellDate        DateTime?
  code               String
  categories         CategoryProduct[]
  followedBy         Follows[]         @relation("followedBy")
  following          Follows[]         @relation("following")
  customercode       String?
  isDeliveriable     Boolean?          @default(false)
  price_origin       Float?
  price_sell         Float?
  price_provider     Float?
  cardFee            Float             @default(0)
  vat                Float             @default(0)
  amountPV           Float             @default(0)
  pricePV            Float             @default(0)
  isDuplicatable     Boolean           @default(true)
  mileage            Float             @default(0)
  quantity           Float             @default(0)
  maxPerSell         Float?
  soldQuantity       Float?            @default(0)
  producer           String?
  origin             String?
  branch             String?
  short_desc         String?
  is_guide_img       Boolean           @default(false)
  guide_img_id       Int?              @unique
  guideLocal         Localfiles?       @relation("guide", fields: [guide_img_id], references: [id])
  guide_info         String?           @db.Text()
  is_prod_info_img   Boolean           @default(false)
  prod_img_id        Int?              @unique
  prodLocal          Localfiles?       @relation("prod", fields: [prod_img_id], references: [id])
  prod_info          String?           @db.Text()
  is_description_img Boolean           @default(false)
  description_img_id Int?              @unique
  descLocal          Localfiles?       @relation("description", fields: [description_img_id], references: [id])
  description        String?           @db.Text()
  m_desc             String?
  mainImg            Int?              @unique
  mainlocal          Localfiles?       @relation("main", fields: [mainImg], references: [id])
  listImg            Int?              @unique
  listlocal          Localfiles?       @relation("list", fields: [listImg], references: [id])
  thumbnailImg       Int?              @unique
  thumbnaillocal     Localfiles?       @relation("thumbnail", fields: [thumbnailImg], references: [id])
  extraImg1          Int               @unique
  extralocal1        Localfiles?       @relation("extra1", fields: [extraImg1], references: [id])
  extraImg2          Int?              @unique
  extralocal2        Localfiles?       @relation("extra2", fields: [extraImg2], references: [id])
  extraImg3          Int?              @unique
  extralocal3        Localfiles?       @relation("extra3", fields: [extraImg3], references: [id])
  extraImg4          Int?              @unique
  extralocal4        Localfiles?       @relation("extra4", fields: [extraImg4], references: [id])
  extraImg5          Int?              @unique
  extralocal5        Localfiles?       @relation("extra5", fields: [extraImg5], references: [id])
  isDeleted          Boolean           @default(false)

  @@map("product")
}

model Follows {
  followedBy   Product @relation("followedBy", fields: [followedById], references: [id])
  followedById Int
  following    Product @relation("following", fields: [followingId], references: [id])
  followingId  Int

  @@id([followingId, followedById])
  @@map("follows")
}

model Category {
  id        Int               @id @default(autoincrement())
  name      String
  isActive  Boolean           @default(true)
  order     Int?
  img       Int
  depth     Int               @default(1)
  parentid  Int?
  parent    Category?         @relation("Parent", fields: [parentid], references: [id])
  subs      Category[]        @relation("Parent")
  products  CategoryProduct[]
  createdAt DateTime          @default(now())
  updatedAt DateTime          @default(now()) @updatedAt

  @@map("category")
}

model CategoryProduct {
  product    Product  @relation(fields: [productId], references: [id])
  productId  Int // relation scalar field (used in the `@relation` attribute above)
  category   Category @relation(fields: [categoryId], references: [id])
  categoryId Int // relation scalar field (used in the `@relation` attribute above)
  createdAt  DateTime @default(now())
  updatedAt  DateTime @default(now()) @updatedAt

  @@id([productId, categoryId])
  @@map("categoryproduct")
}

model Deposit {
  id           Int          @id @default(autoincrement())
  depositDate  DateTime     @default(now())
  userId       Int // like "foreign key"
  user         User         @relation(fields: [userId], references: [id])
  amount       Float
  status       Int          @default(0)
  fee          Int          @default(0)
  isRewarded   Int          @default(0)
  method       Int          @default(0)
  memo         String       @default("")
  isCalculated Boolean      @default(false)
  calId        Int?
  canculation  Calculation? @relation(fields: [calId], references: [id])
  createdAt    DateTime     @default(now())
  updatedAt    DateTime     @default(now()) @updatedAt

  @@map("deposit")
}

model Calculation {
  id          Int       @id @default(autoincrement())
  userId      Int
  user        User      @relation(fields: [userId], references: [id])
  deposits    Deposit[]
  isPaid      Boolean   @default(false)
  userLevel   Int
  reward      Float     @default(0)
  tax         Float     @default(0)
  realReward  Float     @default(0)
  memo        String?
  bankAccount String?
  startDate   DateTime
  endDate     DateTime
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @default(now()) @updatedAt

  @@map("calculation")
}

model Localfiles {
  id           Int      @id @default(autoincrement())
  filename     String
  path         String
  mimetype     String
  createdAt    DateTime @default(now())
  updatedAt    DateTime @default(now()) @updatedAt
  guideImg     Product? @relation("guide")
  prodImg      Product? @relation("prod")
  descImg      Product? @relation("description")
  extraImg1    Product? @relation("extra1")
  extraImg2    Product? @relation("extra2")
  extraImg3    Product? @relation("extra3")
  extraImg4    Product? @relation("extra4")
  extraImg5    Product? @relation("extra5")
  mainImg      Product? @relation("main")
  listImg      Product? @relation("list")
  thumbnailImg Product? @relation("thumbnail")

  @@map("localfiles")
}
